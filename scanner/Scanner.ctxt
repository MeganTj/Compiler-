#BlueJ class context
comment0.params=inStream
comment0.target=Scanner(java.io.InputStream)
comment0.text=\n\ Scanner\ constructor\ for\ construction\ of\ a\ scanner\ that\ \n\ uses\ an\ InputStream\ object\ for\ input.\ \ \n\ Usage\:\ \n\ FileInputStream\ inStream\ \=\ new\ FileInputStream(new\ File(<file\ name>);\n\ Scanner\ lex\ \=\ new\ Scanner(inStream);\n\ @param\ inStream\ the\ input\ stream\ to\ use\n
comment1.params=inString
comment1.target=Scanner(java.lang.String)
comment1.text=\n\ Scanner\ constructor\ for\ constructing\ a\ scanner\ that\ \n\ scans\ a\ given\ input\ string.\ \ It\ sets\ the\ end-of-file\ flag\ and\n\ then\ reads\ the\ first\ character\ of\ the\ input\ string\ into\ the\n\ instance\ field\ currentChar.\n\ Usage\:\ Scanner\ lex\ \=\ new\ Scanner(input_string);\n\ @param\ inString\ the\ string\ to\ scan\n
comment10.params=s
comment10.target=boolean\ isKeyword(java.lang.String)
comment10.text=\n\ Tests\ whether\ a\ String\ is\ a\ keyword\n\ \n\ @param\ s\ the\ String\ that\ is\ being\ tested\ \n\ @return\ true\ if\ the\ character\ is\ a\ keyword;\ otherwise,\ false\n
comment11.params=
comment11.target=java.lang.String\ scanNumber()
comment11.text=\n\ Scans\ the\ input\ and\ returns\ the\ String\ representing\ a\ number\ found\n\ in\ the\ input\ stream\ or\ throws\ a\ ScanErrorException\ if\ no\ number\n\ is\ recognized.\n\ \n\ @return\ the\ number\ as\ a\ String\ if\ it\ is\ recognized\n\ @throw\ a\ ScanErrorException\ if\ no\ number\ is\ recognized\n
comment12.params=
comment12.target=java.lang.String\ scanIdentifier()
comment12.text=\n\ Scans\ the\ input\ and\ returns\ the\ String\ representing\ an\ identifier\ found\n\ in\ the\ input\ stream\ or\ throws\ a\ ScanErrorException\ if\ no\ identifier\n\ is\ recognized.\n\ \n\ @return\ the\ identifier\ as\ a\ String\ if\ it\ is\ recognized\n\ @throw\ a\ ScanErrorException\ if\ no\ identifier\ is\ recognized\n
comment13.params=
comment13.target=java.lang.String\ scanOperator()
comment13.text=\n\ Scans\ the\ input\ and\ returns\ the\ String\ representing\ an\ operator\ found\n\ in\ the\ input\ stream\ or\ throws\ a\ ScanErrorException\ if\ no\ operator\n\ is\ recognized.\n\ \n\ @return\ the\ operator\ as\ a\ String\ if\ it\ is\ recognized\n\ @throw\ a\ ScanErrorException\ if\ no\ operator\ is\ recognized\n
comment14.params=
comment14.target=java.lang.String\ scanRelOp()
comment14.text=\n\ Scans\ the\ input\ and\ returns\ the\ String\ representing\ a\ relative\ operator\n\ found\ in\ the\ input\ stream\ or\ throws\ a\ ScanErrorException\ if\ no\ operator\n\ is\ recognized.\n\ \n\ @return\ the\ relative\ operator\ as\ a\ String\ if\ it\ is\ recognized\n\ @throw\ a\ ScanErrorException\ if\ no\ operator\ is\ recognized\n
comment15.params=
comment15.target=java.lang.String\ nextToken()
comment15.text=\n\ Skips\ any\ leading\ white\ space\ and\ examines\ the\ value\ of\ the\ value\n\ of\ currentChar,\ scans\ the\ next\ token\ in\ the\ input\ stream\n\ \n\ @return\ the\ next\ token\ as\ a\ String\n
comment16.params=args
comment16.target=void\ main(java.lang.String[])
comment16.text=\n\ The\ main\ method\n\ \n\ @param\ args\ an\ array\ of\ arguments\n
comment2.params=
comment2.target=void\ getNextChar()
comment2.text=\n\ Reads\ in\ the\ next\ character\ in\ the\ input\ file\n\n
comment3.params=expected
comment3.target=void\ eat(char)
comment3.text=\n\ Takes\ in\ a\ char\ value\ representing\ the\ expected\ value\ of\ currentChar.\n\ Compares\ the\ value\ of\ the\ input\ parameter\ to\ currentChar.\ If\ the\ two\n\ are\ the\ same,\ it\ advances\ the\ input\ stream\ one\ character;\ otherwise,\n\ the\ method\ throws\ a\ ScanErrorException\n\ \n\ @param\ expected\ the\ value\ representing\ the\ expected\ value\ of\ currentChar\n
comment4.params=
comment4.target=boolean\ hasNext()
comment4.text=\n\ Checks\ whether\ there\ are\ more\ characters\ left\ (end\ of\ file\ hasn't\n\ been\ reached)\n\ \n\ @return\ true\ if\ there\ are\ more\ characters\ left;\ otherwise,\ false\n
comment5.params=c
comment5.target=boolean\ isLetter(char)
comment5.text=\n\ Tests\ whether\ a\ character\ is\ a\ letter\n\ \n\ @param\ c\ the\ character\ that\ is\ being\ tested\ \n\ @return\ true\ if\ the\ character\ is\ a\ letter;\ otherwise,\ false\n
comment6.params=c
comment6.target=boolean\ isDigit(char)
comment6.text=\n\ Tests\ whether\ a\ character\ is\ a\ digit\n\ \n\ @param\ c\ the\ character\ that\ is\ being\ tested\ \n\ @return\ true\ if\ the\ character\ is\ a\ digit;\ otherwise,\ false\n
comment7.params=c
comment7.target=boolean\ isWhiteSpace(char)
comment7.text=\n\ Tests\ whether\ a\ character\ is\ white\ space\n\ \n\ @param\ c\ the\ character\ that\ is\ being\ tested\ \n\ @return\ true\ if\ the\ character\ is\ white\ space;\ otherwise,\ false\n
comment8.params=c
comment8.target=boolean\ isOperator(char)
comment8.text=\n\ Tests\ whether\ a\ character\ is\ an\ operator\n\ \n\ @param\ c\ the\ character\ that\ is\ being\ tested\ \n\ @return\ true\ if\ the\ character\ is\ an\ operator;\ otherwise,\ false\n
comment9.params=c
comment9.target=boolean\ isRelOp(char)
comment9.text=\n\ Tests\ whether\ a\ character\ is\ a\ relative\ operator\n\ \n\ @param\ c\ the\ character\ that\ is\ being\ tested\ \n\ @return\ true\ if\ the\ character\ is\ an\ operator;\ otherwise,\ false\n
numComments=17
